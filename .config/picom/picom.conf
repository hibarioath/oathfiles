shadow = true;
shadow-radius = 7;
shadow-opacity = .55
shadow-offset-x = -7;
shadow-offset-y = -7;

# fading = true;
#fade-in-step = 0.005;
#fade-out-step = 0.005;
# fade-delta = 10

# active-opacity = 1,00;
# inactive-opacity = 0.80;

# frame-opacity = 1.0
# frame-opacity = 0.1;

# Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
# inactive-opacity-override = true
# inactive-opacity-override = false;

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
inactive-dim = 0.33

# Specify a list of conditions of windows that should never be considered focused.
# focus-exclude = []
#focus-exclude = [ "class_g = 'Cairo-clock'" ];
#focus-exclude = [ "class_g = 'Thunar'" ];

# Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0

corner-radius = 0

# Exclude conditions for rounded corners.
#rounded-corners-exclude = [
#  "window_type = 'dock'",
# "window_type = 'desktop'glx 
 
#blur-method = "dual_kawase";
# blur-size = 12
# blur-deviation = false
#blur-strength = 3
# blur-background = false
# blur-background-frame = false
# blur-background-fixed = false
# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ""
# blur-kern = "3x3box";

# Exclude conditions for background blur.
# blur-background-exclude = []
# blur-background-exclude = [
#   "window_type = 'dock'",
#   "class_g ~= 'slop'",                                                           "class_i ~= 'slop'",
#   "name ~= 'slop'",
#   "window_type = 'desktop'",
 #  "_GTK_FRAME_EXTENTS@:c"
 #];

# Specify the backend to use: `xrender`, `glx`, `egl` or `xr_glx_hybrid`.
# `xrender` is the default one.
backend = "glx";

dithered-present = false;

vsync = true;

# por lo visto en DWM hace falta tener esto en falso
mark-wmwin-focused = false
# mark-wmwin-focused = true;
# mark-ovredir-focused = true;

# detect-rounded-corners = false
# detect-rounded-corners = true;

# detect-client-opacity = false
detect-client-opacity = true;

# unredir-if-possible = false

# Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0

# Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

detect-transient = true;

# detect-client-leader = false

# resize-damage = 1

# invert-color-include = []

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer.
# Might cause incorrect opacity when rendering transparent content (but never
# practically happened) and may not work with blur-background.
# My tests show a 15% performance boost. Recommended.
# glx-no-stencil = false

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes,
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
#
# glx-no-rebind-pixmap = false

# Disable the use of damage information.
# This cause the whole screen to be redrawn every time, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
no-use-damage = false
# use-damage = true;

# Use X Sync fence to sync clients' draw calls, to make sure all draw
# calls are finished before picom starts drawing. Needed on nvidia-drivers
# with GLX backend for some users.
#
# xrender-sync-fence = false

# GLX backend: Use specified GLSL fragment shader for rendering window
# contents. Read the man page for a detailed explanation of the interface.
#
# window-shader-fg = "default"

# Use rules to set per-window shaders. Syntax is SHADER_PATH:PATTERN, similar
# to opacity-rule. SHADER_PATH can be "default". This overrides window-shader-fg.
#
# window-shader-fg-rule = [
#   "my_shader.frag:window_type != 'dock'"
# ]

# Force all windows to be painted with blending. Useful if you
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = false

# Do not use EWMH to detect fullscreen windows.
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# Dimming bright windows so their brightness doesn't exceed this set value.
# Brightness of a window is estimated by averaging all pixels in the window,
# so this could comes with a performance hit.
# Setting this to 1.0 disables this behaviour. Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# Specify a list of conditions of windows that should never have transparent
# clipping applied. Useful for screenshot tools, where you need to be able to
# see through transparent parts of the window.
#
# transparent-clipping-exclude = []

log-level = "warn";

wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; clip-shadow-above = true; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; }
  dropdown_menu = { opacity = 0.8; }
};
